#version: "3.8"
services:
  libbpf_core:
    environment:
      - git_hash
    build:
      context: "."
      dockerfile: "./trace/libbpf-core/Dockerfile"
      tags:
        - "localhost:5000/libbpf-core:latest"
    entrypoint: ["/bin/sh", "-c"]
    command: |
      apk upgrade && apk update &&
      apk add apk add clang libelf elfutils-dev zlib-dev bpftool \
        git make &&
      setcap cap_sys_admin,cap_dac_override+eip $(readlink -f $(which qemu-img)) &&
      setcap cap_sys_admin+eip $(readlink -f $(which parted)) &&
      setcap cap_sys_admin,cap_dac_override,cap_dac_read_search+eip $(readlink -f $(which kpartx)) && \
      setcap cap_sys_admin+eip $(readlink -f $(which mkfs.ext4)) && \
      setcap cap_sys_admin,cap_dac_override+ep $(readlink -f $(which losetup))
      . /app/scripts/squashed.sh
    stop_signal: SIGINT
  ayaya:
    environment:
      - git_hash
    build:
      context: "."
      dockerfile: "./trace/ayaya/Dockerfile"
      tags:
        - "localhost:5000/export_bee:latest"
    stop_signal: SIGINT
  isogen_new:
    build:
      context: "."
      dockerfile: "./Dockerfile"
      #"./Dockerfile"
      tags:
        - "localhost:5000/isogen_new:latest"
    entrypoint: ["/bin/sh", "-c"]
    command: |
      apk upgrade && apk update &&
      apk add libcap parted device-mapper fuse-overlayfs qemu qemu-img qemu-system-x86_64 \
        file multipath-tools e2fsprogs xorriso expect libseccomp &&
      setcap cap_sys_admin,cap_dac_override+eip $(readlink -f $(which qemu-img)) &&
      setcap cap_sys_admin+eip $(readlink -f $(which parted)) &&
      setcap cap_sys_admin,cap_dac_override,cap_dac_read_search+eip $(readlink -f $(which kpartx)) && \
      setcap cap_sys_admin+eip $(readlink -f $(which mkfs.ext4)) && \
      setcap cap_sys_admin,cap_dac_override+ep $(readlink -f $(which losetup))
      . /app/scripts/squashed.sh
    devices:
      # HOST_PATH:CONTAINER_PATH[:CGROUP_PERMISSIONS]
      - /dev/mapper/control:/dev/mapper/control
      - /dev/loop-control:/dev/loop-control
      - /dev/fuse:/dev/fuse
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN
      - DAC_OVERRIDE
      - DAC_READ_SEARCH
      - CHOWN
      - SETFCAP
      - MKNOD
    stop_signal: SIGINT
  iso_system_test:
    build:
      context: "."
      dockerfile: "./tests/Dockerfile"
      tags:
        - "localhost:5000/iso-system-test:01"
    stop_signal: SIGINT
  mock_ist:
    build:
      context: "."
      dockerfile: "./tests/Dockerfile"
      tags:
        - "localhost:5000/mock_ist:latest"
    cap_add:
      - SYS_ADMIN
      - DAC_OVERRIDE
    stop_signal: SIGINT
  initramfs:
    environment:
      - git_hash
    build:
      context: "."
      dockerfile: "./assets/busybox/Dockerfile"
      args:
        GIT_COMPOSE_SHA: "${GIT_COMMIT_HASH:-none}"
      tags:
        - "localhost:5000/initramfs:latest"
    stop_signal: SIGINT
  kernel:
    build:
      context: "./assets/kernel/"
      tags:
        - "localhost:5000/linux_build:latest"
    stop_signal: SIGINT
  exporter: # ebpf-exporter
    build:
      context: "./assets/ebpf_exporter/"
      # Dockerfile's location is relative to the context field (the base directory).
      dockerfile: "../../trace/exporter-libbpfgo/Dockerfile"
      tags:
        - "localhost:5000/exporter-static:latest"
    stop_signal: SIGINT
  # =======================
  # standalone prometheus
  # =======================
  node-exporter:  # prometheus node-exporter
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prom-metrics.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - monitoring
  # =======================
  # AWS provider emulation
  # =======================
  tofu_deps:
    build:
      context: "."
      dockerfile: "./deploy/Dockerfile.lstf"
      tags:
        - "localhost:5000/tofu_deps:latest"
  localstack:
    build:
      tags:
        - "localhost:5000/localstack:latest"
    depends_on:
      - tofu_deps
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      #- DEBUG=${DEBUG:-0}
      - DEBUG=$${1:-0}
      - SERVICES=ec2,s3,vpc
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"


