name: iso9660

# This rule triggers when the workflow will run
on:
  # run the workflow manually from Actions tab
  workflow_dispatch:

# jobs can run in sequence or parallel in a workflow
jobs:
  # This single job is called "build"
  build:
    # Specify the operating system for the runner job
    runs-on: ubuntu-latest
    env:
      git_hash: $(git rev-parse --short "$GITHUB_SHA")

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # the job gets runned into $GITHUB_WORKSPACE, that is the environment variable for the repo
      - name: Access current repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Retrieve initramfs artifact from previous actions workflow
        run: |
          set -e
          curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.FETCH_ARTIFACT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/deomorxsy/kjx-headless/actions/artifacts/ \
          > ${{ github.workspace }}/artifacts/artifact-list.json
          initramfs_url=$(cat ${{ github.workspace }}/artifacts/artifact-list.json | jq -r '.artifacts | map(select(.name == "kernel")) | sort_by(.created_at) | last | .archive_download_url')
          curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.FETCH_ARTIFACT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "$initramfs_url" \
          -o ${{ github.workspace }}/artifacts/netpowered.cpio.gz
          #initramfs.cpio.gz

      - name: Retrieve bzImage artifact from previous actions workflow
        run: |
          set -e
          curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.FETCH_ARTIFACT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/deomorxsy/kjx-headless/actions/artifacts/ \
          > ${{ github.workspace }}/artifacts/artifact-list.json
          kernel_url=$(cat ${{ github.workspace }}/artifacts/artifact-list.json | jq -r '.artifacts | map(select(.name == "kernel")) | sort_by(.created_at) | last | .archive_download_url')
          curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.FETCH_ARTIFACT }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "$kernel_url" \
          -o ${{ github.workspace }}/artifacts/kernel.zip && cd ${{ github.workspace }}/artifacts/ && unzip ./kernel.zip



      - name: build runit supervised scripts i.e. beetor
        run: |
          #make beetor
          set -e
          . ./scripts/ccr.sh; checker; \
          docker pull registry:2.8.3
          docker run -d -p 5000:5000 --name registry registry:2.8.3
          docker start registry && \
          docker compose -f ./compose.yml --progress=plain build beetor && \
          docker compose images | grep beetor | awk '{ print $4 }' && \
          docker push localhost:5000/beetor:latest && \
          docker stop registry

      - name: Retrieve runit supervised scripts i.e. beetor
        run: |
          set -e
          docker run -d -p 5000:5000 --name registry registry:2.8.3
          . ./scripts/ccr.sh; checker; \
          docker create --name beetor $(docker images | head | grep beetor | awk 'NR==2 {print $3}') && \
          mkdir -p ${{ github.workspace }}/artifacts/runitsv && \
          docker cp beetor:/app/beetor ${{ github.workspace }}/artifacts/runitsv/ && \
          chmod -c +rX ${{ github.workspace }}/artifacts/runitsv/beetor;
          docker stop registry

      - name: Build iso9660
        run: |
          set -e
          . ./scripts/squashed.sh

      #- name: Build iso9660 via OCI container
      #  run: |
      #    set -e
      #    . ./scripts/ccr.sh; checker && \
      #    . ./scripts/image.sh build && \
      #    . ./scripts/image.sh runtime && \
      #    docker cp "$contname":/app/output.iso ./artifacts/kjx-headless.iso && \
      #    docker rm "$contname" && \
      #    docker stop registry

      #- name: Archive the build artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: bubo
      #    # image size: 8.48MB
      #    # artifact size: 829.6K
      #    path: ${{ github.workspace }}/artifacts/output.iso

  # This single job is called "export"
  export:
    # Specify the operating system for the runner job
    runs-on: ubuntu-latest
    env:
      git_hash: $(git rev-parse --short "$GITHUB_SHA")

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # the job gets runned into $GITHUB_WORKSPACE, that is the environment variable for the repo
      - name: Access current repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Retrieve ISO9660 artifact from previous job on the same action
        run: |
          set -e
          echo
          echo
          sleep(10)

      - uses: actions/checkout@master
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: test
        with:
          token: ${{ secrets.GITHUB_TOKEN}}
          description: 'Preview my app'
          environment: preview

      - uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: 'dirname'
        run: |
          set -e
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: https://aws-bucket.s3.ap-northeast-2.amazonaws.com/${{steps.S3.outputs.object_key}}/index.html
          state: 'success'
          deployment_id: ${{ steps.test.outputs.deployment_id }}


